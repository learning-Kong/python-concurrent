1、简述计算机操作系统中的“中断”的作用？

    计算机操作系统的中断的作用：cpu会切：io阻塞，程序运行时间过长

    中断：计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得
cpu暂时中断当前正在执行的程序而转去执行相应的事件处理程序。

    待处理完毕后又返回原来被中断处理急需执行或者调度新的进程执行的过程，它使计算
机可以更好更快的利用有限的系统资源解决系统响应速度和运行效率的一种控制技术：
    实时响应 + 系统调用

    中断装置是由一些特定的寄存器和控制线路组成，中央处理器和外围设备等识别到的
事件保存在特定的寄存器中。
    中央处理器每执行完一条指令，均有中断装置判别是否有事件发生。
    若无事件发生，CPU继续执行。
    若有事件发生，则中断装置中断原占有CPU的程序的执行，让操作系统的处理事件服
务程序占用CPU，对出现的事件进行处理，事件处理完后，再让原来的程序继续占用CPU执行

2、简述计算机内存中的“内核态”和“用户态”；
操作系统的核心是内核，独立于普通的应用程序，内核可以访问受保护的内存空间，
也可以访问底层硬件设备的所有权限，为了保证用户进程不能直接操作内核，保证内核
的安全，操作系统将虚拟空间划分为两部分，一部分是内核空间，一部分是用户空间。

    内核态：运行操作系统的程序，os的数据存放

    用户态：运行用户程序，用户进程的数据存放

    用户态的应用程序可以通过三种方式来访问内核态的资源：
        1）系统调用
        2）库函数
        3）Shell脚本
    用户态到内核态的切换:
        1.系统调用        用户程序主动发起的 软中断 os.fork() process
        2.异常            被动的   当CPU正在执行运行在用户态的程序时，突然发生某些预
先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的
异常事件，典型的如缺页异常。

        3.外围设备的硬中断  被动的   外围设备完成用户的请求操作后，会像CPU发出中断信号，
此时，CPU就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，
如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。

    参考:https://www.cnblogs.com/bakari/p/5520860.html
        https://blog.csdn.net/qq_34228570/article/details/72995997

3、进程间通信方式有哪些？
进程间通信(IPC)
消息队列（    队列 = 管道 + 锁）
管道(使用消息传递的)
有名管道（FIFO）
信号量
共享内存
套接字（socket）

4.简述你对管道、队列的理解：
管道通常指无名管道
1、它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端
2、它只能用于具有亲缘关系的进程中通信（也就是父与子进程或者兄弟进程之间）
3、数据不可反复读取了，即读了之后欢喜红区中就没有了
消息队列
1、消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级
2、消息队列独立于发送与接收进程。进程终止时，消息队列及其内容不会被删除。
3、消息队列可以实现消息随机查询。

    队列 = 管道 + 锁

5、什么是同步I/O，什么是异步I/O？

同步IO指的是同步传输 ，当发送一个数据请求时，会一直等待，直到有返回结果为止

        异步IO指的是异步传输 ，当发送一个数据请求时，会立即去处理别的事情，当有数据
处理完毕后，会自动的返回结果

    一般同步传输能保证数据正确性 ，而异步能最大化性能。
    如给u盘复制一个大的数据文件，你开了缓冲优化，是异步 工作， 复制的快了，
    你要是刚复制完了直接拔 会丢数据，
     你要是关了，复制的慢了，但你要是关了缓冲优化，复制完了直接拔 不会丢数据，

异步IO
    用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方
面，从kernel的角度，当它受到一个asynchronous read之后，首先它会
立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据
准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给
用户进程发送一个signal，告诉它read操作完成了。